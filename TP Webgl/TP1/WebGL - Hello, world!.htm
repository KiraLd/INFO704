<!DOCTYPE html>
<html lang="fr"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <meta charset="utf-8">
    <title>WebGL - Hello, world!</title>
    <meta name="description" content="WebGL - Hello, world!">
    <meta name="author" content="Aassif Benassarou">
    <link rel="stylesheet" href="WebGL%20-%20Hello,%20world%21_fichiers/style.css">

    <script id="vertex-shader" type="x-shader/x-vertex">
      precision mediump float;
      attribute vec2 position;
      void main ()
      {
        gl_Position = vec4 (position, 0.0, 1.0);
      }
    </script>

    <script id="fragment-shader" type="x-shader/x-fragment">
      precision mediump float;
      uniform vec4 color;
      void main ()
      {
        gl_FragColor = color;
      }
    </script>

    <script>
	
	  var R = function(p, a)
	  {
		var s = Math.sin(a);
		var c = Math.cos(a);
		return {x: p.x*c - p.y*s, y: p.x*s+p.y*c};
	  }
	  
	  var T = function(p, t)
	  {
		return {x: p.x+t, y: p.y + t};
	  }
	  
	var TR = function(p, t, a)
	{
		return T(R(p,a),t);
	}
	
	  
      var CreateShader = function (gl, type, id)
      {
        var shader = gl.createShader (type);
        var script = document.getElementById (id);
        gl.shaderSource (shader, script.textContent);
        gl.compileShader (shader);
        if (! gl.getShaderParameter (shader, gl.COMPILE_STATUS))
        {
          alert (gl.getShaderInfoLog (shader));
          return null;
        } 

        return shader;
      }

      var CreateProgram = function (gl, vertex, fragment)
      {
        var program = gl.createProgram ();
        gl.attachShader (program, CreateShader (gl, gl.VERTEX_SHADER,   vertex));
        gl.attachShader (program, CreateShader (gl, gl.FRAGMENT_SHADER, fragment));
        gl.linkProgram (program);
        if (! gl.getProgramParameter (program, gl.LINK_STATUS))
        {
          alert (gl.getProgramInfoLog (program));
          return null;
        }

        return program;
      }

      var HelloWorld = function (canvas)
      {
        this.canvas = document.getElementById (canvas);
        this.gl = this.canvas.getContext ("webgl");
        var w = this.canvas.width;
        var h = this.canvas.height;
        console.log ("HelloWorld: " + w + 'x' + h);

        var gl = this.gl;
        gl.viewport (0, 0, w, h);
		
		//couleur de fond
        gl.clearColor (0, 1, 0, 1);
		
        this.vbo = gl.createBuffer ();
		gl.bindBuffer (gl.ARRAY_BUFFER, this.vbo);
        var VERTICES = [-0.1, -0.1,  +0.1, -0.1,  -0.1, +0.1,  +0.1, +0.1];
		var p = {x: 0, y: 0};
		for( i = 0; i < 8; i++)
		{
			VERTICES[i] += 100/h;
		}
        gl.bufferData (gl.ARRAY_BUFFER, new Float32Array (VERTICES), gl.STATIC_DRAW);
		this.vbo.itemSize = 2;
		this.vbo.numItems = 4;
		
		
		
		
		
		
		

		
		this.carre = gl.createBuffer();
		gl.bindBuffer (gl.ARRAY_BUFFER, this.carre);
		var vert = [ -0.1, -0.1,  +0.1, -0.1,  -0.1, +0.1,  +0.1, +0.1];
		
		//rotation de 30 degrés, sens anti-horaire
		var a = 30.0;
		var c = Math.cos(a);
		var s = Math.sin(a);
		for(i = 0; i < 4; i++)
		{
			var x = vert[2*i];
			var y = vert[2*i+1]
			vert[2*i] = x*c-y*s;
			vert[2*i+1] = s*x+y*c;
		}
		
		//translation de (300,300)
		for( i = 0; i < 8; i++)
		{
			vert[i] += 300/h;
		}
		
		gl.bufferData (gl.ARRAY_BUFFER, new Float32Array (vert), gl.STATIC_DRAW);
		this.carre.itemSize = 2;
		this.carre.numItems = 4;
		

        this.program = CreateProgram (gl, 'vertex-shader', 'fragment-shader');
        gl.bindAttribLocation (this.program, 0, "position");

        this.animate ();
      }

      HelloWorld.prototype =
      {
        constructor: HelloWorld,

        animate: function ()
        {
          var gl = this.gl;
          gl.clear (gl.COLOR_BUFFER_BIT);

          gl.useProgram (this.program);
          gl.uniform4f (gl.getUniformLocation (this.program, "color"), 1, 1, 1, 1);
		  
		  //premier carré
          gl.bindBuffer (gl.ARRAY_BUFFER, this.carre);
          gl.enableVertexAttribArray (0);
          gl.vertexAttribPointer (0, this.carre.itemSize, gl.FLOAT, false, 0, 0);
          gl.drawArrays (gl.TRIANGLE_STRIP, 0, this.carre.numItems);
		  
		  
		  //2ème carré
		  gl.bindBuffer (gl.ARRAY_BUFFER, this.vbo);
		  gl.vertexAttribPointer (0, this.vbo.itemSize, gl.FLOAT, false, 0, 0);
          gl.drawArrays (gl.TRIANGLE_STRIP, 0, this.vbo.numItems);
		  
          gl.disableVertexAttribArray (0);
          gl.bindBuffer (gl.ARRAY_BUFFER, null);
          gl.useProgram (null);

          requestAnimationFrame (this.animate.bind (this));
        }
      }
    </script>

    <style>
      body {text-align: center;}
    </style>
  </head>

  <body>
    <h1><i>Hello, world!</i></h1>
    <canvas id="canvas:hello-world" width="600" height="600"></canvas>
    <script>new HelloWorld ('canvas:hello-world');</script>
  

</body></html>