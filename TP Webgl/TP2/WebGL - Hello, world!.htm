<!DOCTYPE html>
<html lang="fr"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <meta charset="utf-8">
    <title>WebGL - Hello, world!</title>
    <meta name="description" content="WebGL - Hello, world!">
    <meta name="author" content="Aassif Benassarou">
    <link rel="stylesheet" href="WebGL%20-%20Hello,%20world%21_fichiers/style.css">
	<script src="vbo.js"></script>
	<script src="webgl-debug.js"></script>
	<script src="matrix.js"></script>
	<script src ="program.js"></script>
	<script src="quad.js"></script>
	<script src="first-program.js"></script>
    <script id="vertex-shader" type="x-shader/x-vertex">
      precision mediump float;
      attribute vec2 position;
      void main ()
      {
        gl_Position = vec4 (position, 0.0, 1.0);
      }
    </script>

    <script id="fragment-shader" type="x-shader/x-fragment">
      precision mediump float;
      uniform vec4 color;
      void main ()
      {
        gl_FragColor = color;
      }
    </script>

    <script>
	
	var keyUp = 107;
	var keyDown = 109;
	var scaleX = 1;
	var scaleY = 1;
	var scene;
	var angle = 0;
	var variation = 0.1;
	
	function logGLCall(functionName, args) {   
	   console.log("gl." + functionName + "(" + 
		  WebGLDebugUtils.glFunctionArgsToString(functionName, args) + ")");   
	}
	
	function throwOnGLError(err, funcName, args) {
		throw WebGLDebugUtils.glEnumToString(err) + " was caused by call to: " + funcName;
	}
	
	function validateNoneOfTheArgsAreUndefined(functionName, args) {
		  for (var ii = 0; ii < args.length; ++ii) {
			if (args[ii] === undefined) {
			  console.error("undefined passed to gl." + functionName + "(" +
							 WebGLDebugUtils.glFunctionArgsToString(functionName, args) + ")");
			}
		  }
	}
	
	function logAndValidate(functionName, args) {
		logGLCall(functionName, args);
		validateNoneOfTheArgsAreUndefined (functionName, args);
	}
	
	
	  
      var CreateShader = function (gl, type, id)
      {
        var shader = gl.createShader (type);
        var script = document.getElementById (id);
        gl.shaderSource (shader, script.textContent);
        gl.compileShader (shader);
        if (! gl.getShaderParameter (shader, gl.COMPILE_STATUS))
        {
          alert (gl.getShaderInfoLog (shader));
          return null;
        } 

        return shader;
      }

      var CreateProgram = function (gl, vertex, fragment)
      {
        var program = gl.createProgram ();
        gl.attachShader (program, CreateShader (gl, gl.VERTEX_SHADER,   vertex));
        gl.attachShader (program, CreateShader (gl, gl.FRAGMENT_SHADER, fragment));
        gl.linkProgram (program);
        if (! gl.getProgramParameter (program, gl.LINK_STATUS))
        {
          alert (gl.getProgramInfoLog (program));
          return null;
        }

        return program;
      }
	  
	  //cmd: LINE_STRIP, 0, n+1
	  var polygone= function(gl, n, r, Tx, Ty, w, h)
	  {
		var vertices = new Array();
		Tx = Tx/w;
		Ty = Ty/h;
		r = r/h;
		vertices[0] = 0;
		vertices[1] = r;
		var a = 360*0.0174533/n;
		var c = Math.cos(a);
		var s = Math.sin(a);
		console.debug(c);
		console.debug(s);
		for(i = 1; i < n+1; i++)
		{
			var x = vertices[2*i-2];
			var y = vertices[2*i-1];
			vertices[2*i] = x*c-y*s;
			vertices[2*i+1] = s*x + y*c;
		}
		var o = 
		{
			data: vertices,
			size: 2,
			type: gl.FLOAT,
			usage: gl.STATIC_DRAW,
			tx_:	Tx,
			ty_:	Ty
		};
		return o;
	  }
	  
	  polygoneVBO= function (gl, n, r, Tx, Ty, w, h)
	  {
		var o = polygone(gl,n,r,Tx,TY,w,h);
		var cmd_ = {
			mode: gl.LINE_STRIP,
			first: 0,
			count: n+1
		};
		
		var poly =
		{
			objet: o,
			cmd: cmd_,
			vbo: new VBO.ArrayBuffer(gl,o)
		};
		return poly;
	  }
	  
	  //2 vbo
	  var etoile = function(gl, n, r1, r2, Tx, Ty, w, h)
	  {
		Tx = Tx/w;
		Ty = Ty/h;
		r1 = r1;
		r2 = r2;
		var a = 360*0.0174533/(2*n);

		var c = Math.cos(a);
		var s = Math.sin(a);
		var poly1 = polygone(gl,n,r1,0,0,w,h);
		var poly2 = polygone(gl,n,r2,0,0,w,h);
		var array2 = poly2.data;
		var array1 = poly1.data;
		var size = array2.length;
		console.debug(array2.length);
		for(i= 0; i < size; i++)
		{
			var x = array2[2*i];
			var y = array2[2*i+1]
			array2[2*i] = x*c-y*s;
			array2[2*i+1] = s*x+y*c;
		}
		var vertices = new Array();
		for(i = 0; i < n+1; i++)
		{
			vertices[4*i] = array1[2*i];
			vertices[4*i+1] = array1[2*i+1];
			vertices[4*i+2] = array2[2*i];
			vertices[4*i+3] = array2[2*i+1];
		}
		vertices[4*(n+1)]=vertices[0];
		vertices[4*(n+1)+1]=vertices[1];
		
		console.debug(vertices.length);
		var o = 
		{
			data: vertices,
			size: 2,
			type: gl.FLOAT,
			usage: gl.STATIC_DRAW,
			tx_: Tx,
			ty_: Ty
		};
		
		var cmd_ = {
			mode: gl.LINE_STRIP,
			first: 0,
			count: 2*n+1
		};
		
		var etoile_ =
		{
			objet: o,
			cmd: cmd_,
			vbo: new VBO.ArrayBuffer(gl,o)
		};
			
		return etoile_;
	  }

      var TroisEtoiles = function (canvas)
      {
        this.canvas = document.getElementById (canvas);
		this.scene = new Array();
        this.gl = this.canvas.getContext ("webgl");
		//this.gl = WebGLDebugUtils.makeDebugContext(this.gl, throwOnGLError, logAndValidate);
        var w = this.canvas.width;
        var h = this.canvas.height;
		console.debug(w);
		console.debug(h);
        console.log ("HelloWorld: " + w + 'x' + h);

        var gl = this.gl;
        gl.viewport (0, 0, w, h);
		gl.clearColor(0,0,0,1);
		this.scene[0] = etoile(gl,5,50,100,50,100,200,w,h);
		this.scene[1] = etoile(gl,5,20,50,300,100,w,h);
		this.scene[2] = etoile(gl,5,10,20,300,300,w,h);
		
		var matrix3 = Matrix.ORTHO(0,w,h,0,0,0);
		this.program = new FirstProgram(gl);
		this.animate();
      }
      TroisEtoiles.prototype =
      {
        constructor: TroisEtoiles,

        animate: function ()
        {
          var gl = this.gl;
		  
          gl.clear (gl.COLOR_BUFFER_BIT);

          this.program.use();
		  console.debug(scaleX);
		  console.debug(scaleY);
		  
		  this.program.setColor([1, 1, 1, 1]);
          this.draw();
          gl.useProgram (null);
          requestAnimationFrame (this.animate.bind (this));
        },
		
		draw: function ()
		{
			
			for(i = 0; i < this.scene.length; i++)
			{
				angle = (angle+variation) % 360;
				var axe = [0,0,1];
				var matrix = Matrix.SCALE(scaleX,scaleY,1);
			    var matrix2 = Matrix.TRANSLATION(this.scene[i].objet.tx_,this.scene[i].objet.ty_,1);
				var matrix3 = Matrix.ROTATION(axe,angle*0.0174533);
				this.program.setModelView(Matrix.MULTIPLY([matrix2, matrix3, matrix]));
				this.scene[i].vbo.draw(0,this.scene[i].cmd);
			}
		}
      }
	  
	  function keyEvent(event)
	  {
		var key = event.keyCode || event.which;
		//var keychar = String.fromCharCode(key);
		console.debug(key);
		if(key == 109)
		{
			scaleX *= 0.5;
			scaleY *= 0.5;
		}
		if(key == 107)
		{
			scaleX *= 2.0;
			scaleY  *= 2.0;
		}
		if(key == 106)
		{
			variation *=2;
		}
		if(key == 105)
		{
			variation *=0.5;
		}
		
	  }
    </script>

    <style>
      body {text-align: center;}
    </style>
  </head>

  <body onkeyUp="keyEvent(event)">
    <h1><i>TP2: polygone et Ã©toile</i></h1>
    <canvas id="canvas" width="600" height="600"></canvas>
    <script>scene = new TroisEtoiles ('canvas');</script>
  

</body></html>